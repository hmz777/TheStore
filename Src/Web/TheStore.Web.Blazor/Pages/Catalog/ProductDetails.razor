@page "/product/{productId:int}/{productName}/"
@using TheStore.Blazor.Models.Products;
@using TheStore.Blazor.Models.ValueObjectsDtos;
@using TheStore.Web.Blazor.Helpers;
@using TheStore.Web.Blazor.Models;
@using TheStore.Web.Blazor.Pages.Catalog.Components

@if (dataLoading)
{
	<ProductDetailsSkeleton />
}
else
{
	<div class="container my-5">
		<div class="row">
			<div class="col-12 col-lg-6">
				<div class="product-images">
					<ImageGallery ProductColor="currentColor" />
				</div>
				<div class="row">
					<div class="col-12">
						<article class="product-reviews-section">
							<header>
								<h2>Reviews</h2>
							</header>
							<article class="product-reviews">
								<Reviews />
							</article>
						</article>
					</div>
				</div>
			</div>
			<div class="col-12 col-lg-6 px-5">
				<div class="product-details">
					<div class="info-cell">
						<h1 class="product-title">@product.Name</h1>
					</div>
					<div class="info-cell">
						<span class="product-category">Some Category</span>
						@* TODO: Make Category required relationship for product in order to be pulled with the product *@
					</div>
					<div class="info-cell">
						<span class="product-price">@product.Price</span>
					</div>
					<div class="info-cell">
						<ColorSelector ProductColors="product.ProductColors" ColorChosen="ColorChosen" ControlSize="ControlSize.Normal" />
					</div>
					<div class="info-cell">
						<button class="action-btn action-btn--primary action-btn--block" type="button">
							<span class="px-2">Add to Cart</span>
							<i class="las la-shopping-bag"></i>
						</button>
					</div>
					<div class="info-cell">
						<button class="action-btn action-btn--secondary action-btn--block" type="button">
							<span class="px-2">Favorite</span>
							<i class="lar la-heart"></i>
						</button>
					</div>
					<div class="info-cell">
						<p class="product-description">@product.Description</p>
					</div>
				</div>
				<div class="product-attributes">
					<div class="product-attribute">
						<h3>Shipping</h3>
						<ul>
							<li>
								Shipping details...
							</li>
						</ul>
					</div>
					<div class="product-attribute">
						<h3>Dimentions</h3>
						<ul>
							<li>
								<span class="spec-label">Height</span>:<span class="spec-value">75cm</span>
							</li>
							<li>
								<span class="spec-label">Width</span>:<span class="spec-value">150cm</span>
							</li>
							<li>
								<span class="spec-label">Length</span>:<span class="spec-value">40cm</span>
							</li>
						</ul>
					</div>
					<div class="product-attribute">
						<h3>Specification</h3>
						<ul>
							<li>High quality materials</li>
							<li>Durable wood</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public string ProductName { get; set; }

	[Parameter]
	public int ProductId { get; set; }

	private ProductDto product { get; set; }
	private ProductColorDto currentColor { get; set; }

	private bool dataLoading = true;

	protected override async Task OnInitializedAsync()
	{
		// Get full UI product details
		// Simulate data loading
		await Task.Delay(2500);

		product = DummyDataHelper.GenerateDummyProduct();

		currentColor = product.GetMainColor();

		dataLoading = false;
	}


	private void ColorChosen(string colorCode)
	{
		currentColor = product.ProductColors.Where(pc => pc.ColorCode == colorCode).First();

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}
}