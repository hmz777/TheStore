@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Services;
@using System.Timers;

@inject IJSRuntime JS;
@inject EventBroker EventBroker;
@implements IAsyncDisposable;

<div id="cart">
	<NavLink href="cart" ActiveClass="nav-active" id="cart-btn" class="nav-btn">
		<i class="las la-shopping-bag la-2x"></i>
		<span id="cart-count">@cartCount</span>
	</NavLink>
	<div id="cart-info" class="@(cartInfoShown ? "visible" : "invisible")">
		<div class="cart-item-mini">
			@* TODO: The image here is the main image of the variant *@
			<button class="ms-auto" @onclick="HideCartItemInfo" type="button">
				<i class="las la-times"></i>
			</button>
			<div class="cart-item-mini-inner">
				<img class="item-image" src="https://placehold.co/600x400.png" alt="Product image" />
				<div class="cart-item-mini-info">
					<span class="info-item item-title">Product Name X</span>
					<span class="info-item item-category">Desk Items</span>
					<span class="info-item item-variant">Black/White</span>
					<span class="info-item item-price">500 USD</span>
				</div>
			</div>
		</div>
		<div class="d-flex justify-content-between">
			<NavLink class="action-btn action-btn--secondary" href="/cart">View Bag</NavLink>
			<button class="action-btn action-btn--primary" type="button">Checkout</button>
		</div>
	</div>
</div>

@code {
	private IJSObjectReference? appUtilsModule;

	private int cartCount = 0;

	private Timer? cartItemShowTimer;
	private bool cartInfoShown = false;

	protected override void OnInitialized()
	{
		EventBroker.OnItemAddedToCart += CartItemAdded;
		cartItemShowTimer = new Timer(TimeSpan.FromMilliseconds(3500));
		cartItemShowTimer.Elapsed += CartItemShowTimerElapsed;
		cartItemShowTimer.Enabled = false;
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			appUtilsModule = await JS.InvokeAsync<IJSObjectReference>("import",
					"./modules/AppUtilsModule.js");
		}
	}

	// Event handler
	private async void CartItemAdded(object? sender, string sku)
	{
		cartCount++;
		cartInfoShown = true;
		await appUtilsModule!.InvokeVoidAsync("ToggleBackdrop", true);

		if (ShouldRender())
		{
			StateHasChanged();
		}

		cartItemShowTimer?.Start();
	}

	// Event handler
	private async void CartItemShowTimerElapsed(object? sender, EventArgs args)
	{
		await HideCartItemInfo();
	}

	private async Task HideCartItemInfo()
	{
		cartInfoShown = false;

		await appUtilsModule!.InvokeVoidAsync("ToggleBackdrop", false);

		if (ShouldRender())
		{
			StateHasChanged();
		}

		cartItemShowTimer?.Stop();
	}

	public async ValueTask DisposeAsync()
	{
		if (appUtilsModule is not null)
		{
			await appUtilsModule.DisposeAsync();
		}

		EventBroker.OnItemAddedToCart -= CartItemAdded;
		cartItemShowTimer?.Dispose();
	}
}