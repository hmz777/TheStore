@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.Security.Claims;
@using System.Timers;
@using System.Net;

@inject IJSRuntime JS;
@inject NavigationManager Navigation;
@implements IAsyncDisposable

<div id="upper-navbar" class="@(navExpanded ? "nav-search-expanded" : "")">
	<div class="upper-navbar-section">
		<NavLink href="#" class="nav-link">Find a Store</NavLink>
		<NavLink href="/Help" class="nav-link">Help</NavLink>
		<NavLink href="/contact" class="nav-link">Contact Us</NavLink>
		<AuthorizeView>
			<Authorized>
				<NavLink href="/Identity/Profile">
					@(context.User?.FindFirst("email")?.Value ?? "Error")
				</NavLink>
				<button type="button" @onclick="BeginLogout">Logout</button>
			</Authorized>
			<NotAuthorized>
				<div class="action-btn-group">
					<NavLink href="@($"/Identity/Login")">Login</NavLink>
					<NavLink href="@($"/Identity/Register?ReturnUrl={ReturnUrl}")">Register</NavLink>
				</div>
			</NotAuthorized>
			<Authorizing>
				<i class="las la-circle-notch la-spin la-2x"></i>
			</Authorizing>
		</AuthorizeView>
	</div>
</div>

<header id="top-header">
	<nav id="navbar" class="@(navExpanded ? "nav-search-expanded" : "") @(navDetached ? "nav-detached" : "")">
		<ul class="navbar-inner">
			<li class="nav-item me-auto">
				<div class="logo-container">
					<Logo />
				</div>
			</li>
			<li class="nav-item">
				<NavLink id="catalog-btn" class="nav-btn" ActiveClass="nav-active" href="/catalog">Catalog</NavLink>
			</li>
			<li class="nav-item nav-item-search">
				<GlobalSearch OnSearch="OnSearch" @bind-SearchTerm="searchTerm" />
			</li>
			<li class="nav-item">
				<Cart />
			</li>
			@if (navExpanded)
			{
				<li id="search-cancel">
					<button class="nav-btn" @onclick="OnCancelSearch" type="button">Cancel</button>
				</li>
			}
		</ul>
	</nav>
</header>

@code {
	private IJSObjectReference? appUtilsModule;
	private IJSObjectReference? navModule;

	private bool navExpanded = false;
	private bool navDetached = false;
	private string searchTerm = string.Empty;

	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationState { get; set; }

	private string ReturnUrl => WebUtility.UrlEncode(Navigation.Uri);

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			appUtilsModule = await JS.InvokeAsync<IJSObjectReference>("import",
					"./modules/AppUtilsModule.js");

			navModule = await JS.InvokeAsync<IJSObjectReference>("import",
					"./modules/NavModule.js");

			await navModule.InvokeVoidAsync("InitNavbarObservability", DotNetObjectReference.Create(this));
		}
	}

	private void BeginLogout(MouseEventArgs args)
	{
		Navigation.NavigateToLogout("authentication/logout");
	}

	private async Task OnSearch()
	{
		if (navExpanded == false)
		{
			navExpanded = true;
			await appUtilsModule!.InvokeVoidAsync("ToggleBackdrop", true);

			if (ShouldRender())
			{
				StateHasChanged();
			}
		}
	}

	private async Task OnCancelSearch()
	{
		navExpanded = false;
		await appUtilsModule!.InvokeVoidAsync("ToggleBackdrop", false);
		searchTerm = string.Empty;

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	[JSInvokable]
	public void DetachNavBar(bool toggle)
	{
		navDetached = toggle;

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (appUtilsModule is not null)
		{
			await appUtilsModule.DisposeAsync();
		}

		if (navModule is not null)
		{
			await navModule.DisposeAsync();
		}
	}
}
