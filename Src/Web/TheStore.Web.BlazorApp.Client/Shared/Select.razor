@using Ardalis.GuardClauses;
@using TheStore.Web.BlazorApp.Client.Helpers;
@typeparam T
@inject IJSRuntime JS;
@implements IAsyncDisposable

<CascadingValue Value="this" Name="Parent">
	<div @attributes="OtherAttributes" class="c-select @OtherAttributes?.GetValueOrDefault("class")">
		<button @onclick="() => ShowOptions(!OptionsShown)"
				class="c-select-value"
				type="button">
			<span class="c-select-text">@DisplayText</span>
			<i class="las la-caret-down ms-2 @(OptionsShown ? "la-rotate-180" : "")"></i>
		</button>
		<div class="c-select-options @(OptionsShown ? "shown" : "")">
			@ChildContent
		</div>
	</div>
</CascadingValue>

@code {
	[Parameter]
	public string DisplayText { get; set; } = "Select an option";

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public T? Value { get; set; }

	[Parameter]
	public EventCallback<T> ValueChanged { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? OtherAttributes { get; set; }

	private IJSObjectReference? selectModule;
	private bool OptionsShown { get; set; }
	private T? InternalValue { get; set; }
	private List<SelectOption<T>> Options = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			selectModule = await JS.
				InvokeAsync<IJSObjectReference>("import", "./modules/SelectModule.js");

			await selectModule.InvokeVoidAsync("HookSelectDropdownAwayClick", DotNetObjectReference.Create(this));
		}

		if (Value?.Equals(default(T)) == false && EqualityHelpers.AreEqual<T>(InternalValue, Value) == false)
		{
			ChangeValueInternal(GetOptionFromHashCode(Value.GetHashCode()));
		}
	}

	private SelectOption<T>? GetOptionFromHashCode(int hashCode)
	{
		return Options
		.Where(v => v.Value!.GetHashCode() == hashCode)
		.FirstOrDefault();
	}

	private void ChangeValueInternal(SelectOption<T>? selectedOption)
	{
		Guard.Against.Null(selectedOption, nameof(selectedOption));

		foreach (var option in Options.Where(o => o != selectedOption))
		{
			option.Select(false);
		}

		InternalValue = selectedOption.Value;
		DisplayText = selectedOption.Text;
		selectedOption.Select(true);

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	public void AddOption(SelectOption<T> option) => Options.Add(option);

	[JSInvokable]
	public void ShowOptions(bool toggle)
	{
		OptionsShown = toggle;

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	public async Task ChangeValue(SelectOption<T>? selectedOption)
	{
		Guard.Against.Null(selectedOption, nameof(selectedOption));

		ChangeValueInternal(selectedOption);

		await ValueChanged.InvokeAsync(InternalValue);

		ShowOptions(false);

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (selectModule is not null)
		{
			await selectModule.DisposeAsync();
		}
	}
}