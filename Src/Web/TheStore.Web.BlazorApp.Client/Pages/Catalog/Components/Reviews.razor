@using TheStore.SharedModels.Models.Products
@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Services
@inject CatalogService CatalogService;

@if (DataLoading)
{
	<ProductReviewsSkeleton />
}
else
{
	@foreach (var review in ProductReviewsResult.Reviews)
	{
		<Review @key="@($"review-{review.GetHashCode()}")"
				Title="@review.Title"
				Rating="@review.Rating"
				Date="review.Date"
				User="@review.User"
				Content="@review.Content" />
	}

	@if (Page < NumberOfPages)
	{
		<button class="action-btn action-btn--block action-btn--secondary" type="button">Load More</button>
	}
}

@code {
	[Parameter]
	public int ProductId { get; set; }

	private ProductReviewsPaginatedResult ProductReviewsResult { get; set; } = new();
	private int Take { get; set; } = 6;
	private int Page { get; set; } = 1;
	private int Count { get; set; }
	private int NumberOfPages => (int)Math.Ceiling(Count / (decimal)Take);
	private bool DataLoading { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await FetchData();
			DataLoading = false;
			StateHasChanged();
		}
	}

	private async Task FetchData()
	{
		ProductReviewsResult = await CatalogService.ListProductReviewsPaginated(ProductId, Take, 1);
	}
}