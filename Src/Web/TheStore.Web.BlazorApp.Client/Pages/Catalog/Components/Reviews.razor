@using TheStore.SharedModels.Models.Products
@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Services
@inject CatalogService CatalogService;

<article class="product-reviews-section">
	<header>
		<h2 class="my-4">Reviews</h2>
	</header>
	<article class="product-reviews">
		@if (DataLoading)
		{
			<ReviewsSkeleton />
		}
		else
		{
			var count = ProductReviewsResult.Reviews.Count;

			@for (var i = 0; i < count; i++)
			{
				var review = ProductReviewsResult.Reviews[i];

				<Review @key="@($"review-{review.GetHashCode()}")"
						Title="@review.Title"
						Rating="@review.Rating"
						Date="review.Date"
						User="@review.User"
						Content="@review.Content" />
			}

			@if (Page < NumberOfPages)
			{
				<button class="action-btn action-btn--secondary align-self-center mt-4" @onclick="LoadMore" type="button">Load More</button>
			}
		}
	</article>
</article>

@code {
	[Parameter]
	public string Identifier { get; set; }

	private ProductReviewsPaginatedResult ProductReviewsResult { get; set; } = new();
	private ProductReviewsPaginatedResult ProductReviewsResultInternal { get; set; } = new();
	private int Take { get; set; } = 2;
	private int Page { get; set; } = 1;
	private int Count => ProductReviewsResult.Count;
	private int NumberOfPages => (int)Math.Ceiling(Count / (decimal)Take);
	private bool DataLoading { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await FetchData(1);
			DataLoading = false;
			StateHasChanged();
		}
	}

	private async Task FetchData(int page)
	{
		ProductReviewsResultInternal = await CatalogService.ListProductReviewsPaginated(Identifier, Take, page);

		ProductReviewsResult.PageNumber = ProductReviewsResultInternal.PageNumber;
		ProductReviewsResult.Count = ProductReviewsResultInternal.Count;
		ProductReviewsResult.Reviews.AddRange(ProductReviewsResultInternal.Reviews);
	}

	private async Task LoadMore()
	{
		await FetchData(++Page);
		StateHasChanged();
	}
}