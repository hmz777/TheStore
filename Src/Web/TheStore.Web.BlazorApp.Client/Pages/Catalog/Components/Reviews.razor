@using MediatR
@using TheStore.SharedModels.Models.Products
@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Mediator.Queries
@using TheStore.Web.BlazorApp.Client.Services

@inject IMediator Mediator;

<article class="product-reviews-section">
    <header>
        <h2 class="my-4">Reviews</h2>
    </header>
    <article class="product-reviews">
        @if (DataLoading)
        {
            <ReviewsSkeleton />
        }
        else
        {
            var count = ProductReviewsResult.Reviews.Count;

            @for (var i = 0; i < count; i++)
            {
                var review = ProductReviewsResult.Reviews[i];

                <Review @key="@($"review-{review.GetHashCode()}")"
                        Title="@review.Title"
                        Rating="@review.Rating"
                        Date="review.Date"
                        User="@review.User"
                        Content="@review.Content" />
            }

            @if (Page < NumberOfPages)
            {
                <button class="action-btn action-btn--secondary align-self-center mt-4" @onclick="LoadMore" type="button">Load More</button>
            }
        }
    </article>
</article>

@code {
    [Parameter]
    public string Identifier { get; set; }

    private ProductReviewsPaginatedResult ProductReviewsResult { get; set; } = new();
    private int Take { get; set; } = 2;
    private int Page { get; set; } = 1;
    private int Count => ProductReviewsResult.Count;
    private int NumberOfPages => (int)Math.Ceiling(Count / (decimal)Take);
    private bool DataLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
            DataLoading = false;

            if (ShouldRender())
            {
                StateHasChanged();
            }
        }
    }

    private async Task FetchData()
    {
        var result = await Mediator.Send(new ListProductReviewsQuery(Identifier, Take, Page));

        var value = result.Value!;
        ProductReviewsResult.PageNumber = value.PageNumber;
        ProductReviewsResult.Count = value.Count;
        ProductReviewsResult.Reviews.AddRange(value.Reviews);

        Page++;
    }

    private async Task LoadMore()
    {
        await FetchData();

        if (ShouldRender())
        {
            StateHasChanged();
        }
    }
}