@page "/catalog/{catalogName?}/{manufacturer?}/{priceRange?}/{sortDirection?}/{page:int?}"
@using MediatR
@using TheStore.Web.BlazorApp.Client.Mediator.Queries
@using TheStore.Web.BlazorApp.Client.Services
@using TheStore.SharedModels.Models.Products;
@using TheStore.SharedModels.Models.ValueObjectsDtos;
@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Pages.Catalog.Components
@using TheStore.Web.BlazorApp.Client.Shared.Results;

@inject IMediator Mediator

<CatalogHeader Header="@CatalogName" Description="@CatalogDescription" />

<div class="container my-5">
    <div class="row">
        @if (dataLoading)
        {
            <ProductCardsSkeleton />
        }
        else if (Products.Count > 0)
        {
            @foreach (var product in Products)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <ProductCard @key="product.Identifier"
                                 Product="product" />
                </div>
            }

            <div class="col-12 position-sticky" style="bottom:1em;z-index:3;">
                <CatalogPagination CurrentPage="Page"
                                   NumberOfPages="NumberOfPages"
                                   OnNavigateToPreviousPage="NavigateToPreviousPage"
                                   OnNavigateToNumberedPage="NavigateToNumberedPage"
                                   OnNavigateToNextPage="NavigateToNextPage" />
            </div>
        }
        else
        {
            <div class="col-12 col-lg-6 offset-lg-3">
                <Result Type="ResultType.NoProducts"
                        Message="No products available with the current filter" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? CatalogName { get; set; }

    [Parameter]
    public string? Manufacturer { get; set; }

    [Parameter]
    public string? PriceRange { get; set; }

    [Parameter]
    public string? SortDirection { get; set; }

    [Parameter]
    public int Page { get; set; } = 1;

    private string? CatalogDescription { get; set; }
    private int Take { get; set; } = 6;
    private int Count { get; set; }
    private int NumberOfPages => (int)Math.Ceiling(Count / (decimal)Take);

    private bool dataLoading = true;
    private List<ProductCatalogDtoRead> Products { get; set; } = [];

    protected override void OnParametersSet()
    {
        CatalogName = CatalogName ?? "Product Catalog";
        CatalogDescription = CatalogDescription ?? "A variety of products to choose from!";

        SortDirection = SortDirection ?? "asc";
        Page = Page == default ? 1 : Page;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData(Page, Take);

            dataLoading = false;

            if (ShouldRender())
            {
                StateHasChanged();
            }
        }
    }

    private async Task FetchData(int page, int take)
    {
        var result = await Mediator.Send(new ListProductsWithPaginationQuery(page, take));

        if (result.IsSuccessful == false)
        {
            // TODO: User some messaging service to show friendly error to user
            // TODO: Show error page
            return;
        }

        var value = result.Value;

        Products = value!.Products;
        Count = value.Count;
    }

    private async Task NavigateToNumberedPage(int page)
    {
        Page = page;

        await FetchData(Page, Take);

        if (ShouldRender())
        {
            StateHasChanged();
        }
    }

    private async Task NavigateToNextPage()
    {
        await FetchData(Take, ++Page);

        if (ShouldRender())
        {
            StateHasChanged();
        }
    }

    private async Task NavigateToPreviousPage()
    {
        await FetchData(Take, --Page);

        if (ShouldRender())
        {
            StateHasChanged();
        }
    }
}
