@page "/product/{productId:int}/{productName}/"
@using AutoMapper
@using MediatR;
@using TheStore.SharedModels.Models.Products;
@using TheStore.SharedModels.Models.ValueObjectsDtos;
@using TheStore.Web.BlazorApp.Client.Helpers;
@using TheStore.Web.BlazorApp.Client.Mediator.Commands;
@using TheStore.Web.BlazorApp.Client.Models;
@using TheStore.Web.BlazorApp.Client.Pages.Catalog.Components
@using TheStore.Web.BlazorApp.Client.Services;
@inject IMediator Mediator;
@inject IMapper Mapper;
@inject CatalogService CatalogService;

@if (DataLoading)
{
	<ProductDetailsSkeleton />
}
else
{
	<div class="container my-5">
		<div class="row">
			<div class="col-12 col-lg-6">
				<div class="product-images">
					<ImageGallery ProductColor="CurrentVariant.Color" />
				</div>
				<div class="row">
					<div class="col-12">
						<article class="product-reviews-section">
							<header>
								<h2 class="my-4">Reviews</h2>
							</header>
							<article class="product-reviews">
								<Reviews />
							</article>
						</article>
					</div>
				</div>
			</div>
			<div class="col-12 col-lg-6 px-5">
				<div class="product-details">
					<div class="info-cell">
						<h1 class="product-title">@Product.Name</h1>
					</div>
					<div class="info-cell">
						<span class="product-category">Some Category</span>
						@* TODO: Make Category required relationship for product in order to be pulled with the product *@
					</div>
					<div class="info-cell">
						<span class="product-price">@CurrentVariant.Price</span>
					</div>
					<div class="info-cell">
						<VariantSelector Variants="Mapper.Map<List<VariantSelectorModel>>(Product.Variants)" VariantChosen="VariantChosen" ControlSize="ControlSize.Normal" />
					</div>
					<div class="info-cell">
						<button class="action-btn action-btn--primary action-btn--block" @onclick="AddToCart" type="button">
							<span class="px-2">Add to Cart</span>
							<i class="las la-shopping-bag"></i>
						</button>
					</div>
					<div class="info-cell">
						<button class="action-btn action-btn--secondary action-btn--block" type="button">
							<span class="px-2">Favorite</span>
							<i class="lar la-heart"></i>
						</button>
					</div>
					<div class="info-cell">
						<p class="product-description">@Product.Description</p>
					</div>
				</div>
				<div class="product-attributes">
					<div class="product-attribute">
						<h3 class="my-4">Shipping</h3>
						<ul>
							<li>
								Shipping details...
							</li>
						</ul>
					</div>
					<div class="product-attribute">
						<h3 class="my-4">Dimentions</h3>
						<ul>
							<li>
								<span class="spec-label">Height</span>:
								<span class="spec-value">@CurrentVariant.Dimentions.Height @CurrentVariant.Dimentions.Unit</span>
							</li>
							<li>
								<span class="spec-label">Width</span>:
								<span class="spec-value">@CurrentVariant.Dimentions.Width @CurrentVariant.Dimentions.Unit</span>
							</li>
							<li>
								<span class="spec-label">Length</span>:
								<span class="spec-value">@CurrentVariant.Dimentions.Length @CurrentVariant.Dimentions.Unit</span>
							</li>
						</ul>
					</div>
					<div class="product-attribute">
						<h3 class="my-4">Specification</h3>
						<ul>
							@foreach (var spec in CurrentVariant.Sepcifications)
							{
								<li>
									<span class="spec-label">@spec.Name</span>
									<span class="spec-value">@spec.Value</span>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public string ProductName { get; set; }

	[Parameter]
	public int ProductId { get; set; }

	private ProductDetailsDtoRead Product { get; set; }

	private List<ProductColorDtoRead> Colors => Product.Variants.Select(v => v.Color).ToList();

	private ProductVariantDetailsDtoRead CurrentVariant { get; set; }

	private bool DataLoading { get; set; } = true;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		// Get full UI product details

		if (firstRender)
		{
			Product = await CatalogService.GetProductDetails(ProductId);
			CurrentVariant = Product.MainVariant;

			DataLoading = false;
			StateHasChanged();
		}
	}

	private void VariantChosen(string variantSku)
	{
		CurrentVariant = Product.Variants.First(v => v.Sku == variantSku);

		if (ShouldRender())
		{
			StateHasChanged();
		}
	}

	private async Task AddToCart()
	{
		await InvokeAsync(async () =>
		{
			await Mediator.Send(new AddItemToCartCommand(ProductId));
		});
	}
}