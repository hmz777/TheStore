@using TheStore.SharedModels.Models.Cart
@using TheStore.Web.BlazorApp.Client.Shared
@using TheStore.SharedModels.Models.Products;

<article class="cart-item" @attributes="OtherAttributes">
    <div class="cart-item-inner">
        <img loading="lazy" class="cart-item-image" src="@Item.ProductPictureUrl" alt="@Item.ProductPictureDescription" />
        <div class="cart-item-content">
            <div class="cart-item-content-inner">
                <span class="cart-item-info cart-item-info-name">@Item.ProductName</span>
                <span class="cart-item-info cart-item-info-cateogry">@Item.ProductCategory</span>
                <span class="cart-item-info cart-item-info-variant">
                    <span class="cart-item-variant dp-color">@Item.ProductColor</span>
                    <span class="cart-item-variant">@Item.ProductSize</span>
                </span>
                <div class="cart-item-info">
                    <NumberSelector Value="Item.Quantity" ValueChanged="OnItemQuantityUpdated" />
                </div>
                <div class="cart-item-info mt-4">
                    <button class="me-2" type="button">
                        <i class="lar la-heart la-2x"></i>
                    </button>
                    <button type="button">
                        <i class="las la-trash la-2x"></i>
                    </button>
                </div>
            </div>
            <span class="cart-item-price">@Item.ProductPrice</span>
        </div>
    </div>
</article>

@code {
    [Parameter]
    public CartItemDto Item { get; set; }

    [Parameter]
    public EventCallback<CartItemDto> ItemChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> OtherAttributes { get; set; }

    private async Task OnItemQuantityUpdated(int quantity)
    {
        Item.Quantity = quantity;
        await ItemChanged.InvokeAsync(Item);
    }
}