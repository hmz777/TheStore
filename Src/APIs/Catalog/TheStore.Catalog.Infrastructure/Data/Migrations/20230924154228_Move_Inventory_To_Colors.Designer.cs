// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheStore.Catalog.Infrastructure.Data;

#nullable disable

namespace TheStore.Catalog.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20230924154228_Move_Inventory_To_Colors")]
    partial class Move_Inventory_To_Colors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Branches.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsSynchronization")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Products.AssembledProduct", b =>
                {
                    b.HasBaseType("TheStore.Catalog.Core.Aggregates.Products.Product");

                    b.HasDiscriminator().HasValue("AssembledProduct");
                });

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Branches.Branch", b =>
                {
                    b.OwnsOne("TheStore.Catalog.Core.ValueObjects.Image", "Image", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("Alt")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsMainImage")
                                .HasColumnType("bit");

                            b1.Property<string>("StringFileUri")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.OwnsOne("TheStore.Catalog.Core.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");

                            b1.OwnsOne("TheStore.Catalog.Core.ValueObjects.Coordinate", "Coordinate", b2 =>
                                {
                                    b2.Property<int>("AddressBranchId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Latitude")
                                        .HasColumnType("real");

                                    b2.Property<float>("Longitude")
                                        .HasColumnType("real");

                                    b2.HasKey("AddressBranchId");

                                    b2.ToTable("Branches");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressBranchId");
                                });

                            b1.Navigation("Coordinate")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TheStore.Catalog.Core.Aggregates.Products.Product", b =>
                {
                    b.OwnsOne("TheStore.Catalog.Core.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(16, 3)
                                .HasColumnType("decimal(16,3)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("TheStore.Catalog.Core.ValueObjects.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyProductId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CurrencyCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("MoneyProductId");

                                    b2.ToTable("Products");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyProductId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsMany("TheStore.Catalog.Core.ValueObjects.Products.ProductColor", "productColors", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ColorCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsMainColor")
                                .HasColumnType("bit");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("ProductColor");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("TheStore.Catalog.Core.ValueObjects.InventoryRecord", "Inventory", b2 =>
                                {
                                    b2.Property<int>("ProductColorProductId")
                                        .HasColumnType("int");

                                    b2.Property<int>("ProductColorId")
                                        .HasColumnType("int");

                                    b2.Property<int>("AvailableStock")
                                        .HasColumnType("int");

                                    b2.Property<int>("MaxStockThreshold")
                                        .HasColumnType("int");

                                    b2.Property<bool>("OnReorder")
                                        .HasColumnType("bit");

                                    b2.Property<int>("OverStock")
                                        .HasColumnType("int");

                                    b2.Property<int>("RestockThreshold")
                                        .HasColumnType("int");

                                    b2.HasKey("ProductColorProductId", "ProductColorId");

                                    b2.ToTable("ProductColor");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductColorProductId", "ProductColorId");
                                });

                            b1.OwnsMany("TheStore.Catalog.Core.ValueObjects.Image", "images", b2 =>
                                {
                                    b2.Property<int>("ProductColorProductId")
                                        .HasColumnType("int");

                                    b2.Property<int>("ProductColorId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Alt")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("IsMainImage")
                                        .HasColumnType("bit");

                                    b2.Property<string>("StringFileUri")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ProductColorProductId", "ProductColorId", "Id");

                                    b2.ToTable("ProductColor_images");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductColorProductId", "ProductColorId");
                                });

                            b1.Navigation("Inventory")
                                .IsRequired();

                            b1.Navigation("images");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("productColors");
                });
#pragma warning restore 612, 618
        }
    }
}
